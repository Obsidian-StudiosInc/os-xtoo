diff --git a/src/main/java/mondrian/rolap/RolapConnectionPool.java b/src/main/java/mondrian/rolap/RolapConnectionPool.java
index fc4e26378..ab6067426 100644
--- a/src/main/java/mondrian/rolap/RolapConnectionPool.java
+++ b/src/main/java/mondrian/rolap/RolapConnectionPool.java
@@ -13,9 +13,11 @@ package mondrian.rolap;
 
 import mondrian.olap.Util;
 
-import org.apache.commons.dbcp.*;
-import org.apache.commons.pool.ObjectPool;
-import org.apache.commons.pool.impl.GenericObjectPool;
+import org.apache.commons.dbcp2.*;
+import org.apache.commons.pool2.ObjectPool;
+import org.apache.commons.pool2.impl.AbandonedConfig;
+import org.apache.commons.pool2.impl.GenericObjectPool;
+import org.apache.commons.pool2.impl.GenericObjectPoolConfig;
 
 import java.util.*;
 import javax.sql.DataSource;
@@ -183,49 +185,41 @@ class RolapConnectionPool {
     {
         ObjectPool connectionPool = mapConnectKeyToPool.get(key);
         if (connectionPool == null) {
-            // use GenericObjectPool, which provides for resource limits
-            connectionPool = new GenericObjectPool(
-                null, // PoolableObjectFactory, can be null
-                5000, // max active
-                GenericObjectPool.WHEN_EXHAUSTED_GROW, // action when exhausted
-                3000, // max wait (milli seconds)
-                10, // max idle
-                mysql, // test on borrow
-                false, // test on return
-                60000, // time between eviction runs (millis)
-                5, // number to test on eviction run
-                30000, // min evictable idle time (millis)
-                true); // test while idle
-
             // create a PoolableConnectionFactory
             AbandonedConfig abandonedConfig = new AbandonedConfig();
             // flag to remove abandoned connections from pool
-            abandonedConfig.setRemoveAbandoned(true);
+            abandonedConfig.setRemoveAbandonedOnMaintenance(true);
             // timeout (seconds) before removing abandoned connections
             abandonedConfig.setRemoveAbandonedTimeout(300);
             // Flag to log stack traces for application code which abandoned a
             // Statement or Connection
             abandonedConfig.setLogAbandoned(true);
+
+            GenericObjectPoolConfig config = new GenericObjectPoolConfig();
+            config.setBlockWhenExhausted(false);
+            config.setMaxIdle(10);
+            config.setMaxTotal(5000);
+            config.setMaxWaitMillis(3000);
+            config.setMinEvictableIdleTimeMillis(30000);
+            config.setNumTestsPerEvictionRun(5);
+            config.setTestOnBorrow(mysql);
+            config.setTestOnReturn(false);
+            config.setTestWhileIdle(true);
+            config.setTimeBetweenEvictionRunsMillis(60000);
+
+            // use GenericObjectPool, which provides for resource limits
+            connectionPool = new GenericObjectPool(
+                null, // PoolableObjectFactory, can be null
+		config,
+		abandonedConfig);
+
             PoolableConnectionFactory poolableConnectionFactory =
-                new PoolableConnectionFactory(
-                    // the connection factory
-                    connectionFactory,
-                    // the object pool
-                    connectionPool,
-                    // statement pool factory for pooling prepared statements,
-                    // or null for no pooling
-                    null,
-                    // validation query (must return at least 1 row e.g. Oracle:
-                    // select count(*) from dual) to test connection, can be
-                    // null
-                    mysql ? "SELECT 1" : null,
-                    // default "read only" setting for borrowed connections
-                    false,
-                    // default "auto commit" setting for returned connections
-                    true,
-                    // AbandonedConfig object configures how to handle abandoned
-                    // connections
-                    abandonedConfig);
+                new PoolableConnectionFactory(connectionFactory,null);
+            poolableConnectionFactory.setPool(connectionPool);
+            poolableConnectionFactory.setPoolStatements(false);
+            poolableConnectionFactory.setValidationQuery(mysql ? "SELECT 1" : null);
+            poolableConnectionFactory.setDefaultReadOnly(false);
+            poolableConnectionFactory.setDefaultAutoCommit(true);
 
             // "poolableConnectionFactory" has registered itself with
             // "connectionPool", somehow, so we don't need the value any more.
